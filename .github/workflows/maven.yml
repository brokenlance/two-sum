name: Java CI with Maven, Docker, and Kubernetes

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Environment variables available to all jobs and steps in this workflow
# Change the CLOUD env variable depending on the cloud provider
# Update the payload mode to either training or live depending on the type 
env:
  CLOUD: AKS
  GC_ANALYSIS: false
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  AKS_SUBSCRIPTION: ${{ secrets.AKS_SUBSCRIPTION }}
  AKS_CLIENT_ID: ${{ secrets.AKS_CLIENT_ID }}
  AKS_TENANT_ID: ${{ secrets.AKS_TENANT_ID }}
  AI_KEY: ${{ secrets.AI_KEY }}
  IBM_CLOUD_REGION: us-south
  REGISTRY_HOSTNAME: us.icr.io
  IKS_CLUSTER: mycluster-dal10-u3c.2x4
  AKS_CLUSTER: mistic
  AKS_RESOURCE: mistic

permissions:
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
         fetch-depth: 2
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.0.0
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_USER }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5.0.0
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: brandonbenham/two-sum
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ./src/main/resources/docker-resources/Dockerfile
    - name: Install IBM Cloud CLI
      if: ${{ env.CLOUD == 'IKS' }}
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        #ibmcloud plugin install -f container-registry
    - name: Authenticate with IBM Cloud CLI
      if: ${{ env.CLOUD == 'IKS' }}
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g Default
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
    - name: Test Env Vars
      if: ${{ env.CLOUD == 'AKS' }}
      run: |
         env
         echo $AKS_TENANT_ID
    - name: Azure Login
      if: ${{ env.CLOUD == 'AKS' }}
      uses: Azure/login@v1.5.1
      with:
        client-id: ${{ secrets.AKS_CLIENT_ID }}
        subscription-id: ${{ secrets.AKS_SUBSCRIPTION }}
        tenant-id: ${{ secrets.AKS_TENANT_ID }}
    - name: Set AKS context
      uses: azure/aks-set-context@v3.0
      if: ${{ env.CLOUD == 'AKS' }}
      with:
        resource-group: ${{ env.AKS_RESOURCE }}
        cluster-name: ${{ env.AKS_CLUSTER }}
    - name: Deploy system-under-test to the cloud
      run: |
        kubectl config current-context
        kubectl apply -f src/main/resources/kube-resources/config-map.yaml
        kubectl apply -f src/main/resources/kube-resources/deployment.yaml
        kubectl apply -f src/main/resources/kube-resources/service.yaml
        kubectl rollout restart deployment two-sum
        kubectl rollout status deployment two-sum
        kubectl get services -o wide
        kubectl get nodes -o wide
    - name: Sleep until restart completes
      run: sleep 20s
      shell: bash
    - name: Deploy K6 to the cloud
      run: |
        export DATESTAMP=`date -u +"%Y-%m-%dT%H:%M:%S.%N9Z"`
        echo "DATESTAMP=$DATESTAMP" >> $GITHUB_ENV;
        if [[ $CLOUD == "IKS" ]]; then
           sed s/TOKEN-VALUE/${{ secrets.K6_TOKEN_IKS }}/g src/main/resources/kube-resources/k6.yaml > k6.yaml
        else
           sed s/TOKEN-VALUE/${{ secrets.K6_TOKEN_AKS }}/g src/main/resources/kube-resources/k6.yaml > k6.yaml
        fi;
        kubectl apply -f k6.yaml
    - name: Sleep until load test finishes
      run: sleep 300s
      shell: bash
    - name: Garbage Collection Analysis
      if: ${{ env.GC_ANALYSIS == 'true' }}
      run: |
        POD=$(kubectl get pods | grep two-sum | awk '{print $1}');
        GCFILE=$(kubectl exec -it $POD -- /bin/sh -c 'ls --color=never gc*' | tr -d '\r' | tr -d '\n')
        kubectl cp $POD:$GCFILE gc.log;
        # NOTE: the jvmoptions data should reflect the actual parameters used in the config map
        docker container run -v "$PWD":/home/garbagecat/files ghcr.io/mgm3746/garbagecat --console --preprocess --jvmoptions "-XX:+UseG1GC -Xmx48m -Xms48m -XX:NewSize=32m -XX:MaxNewSize=32m -XX:+UseStringDeduplication -XX:G1ReservePercent=10" /home/garbagecat/files/gc.log
    - name: Run seasonal forest
      env:
         DATESTAMP: ${{ env.DATESTAMP }}
      run: |
        echo "datestamp: ${DATESTAMP}"
        #export TEMPLATE='{"date":"%s", "mode":"training", "skip":"8000", "testName":"two-sum"}'
        export TEMPLATE='{"date":"%s", "mode":"live", "skip":"200", "testName":"two-sum"}'
        echo "The template is: $TEMPLATE";
        export PAYLOAD=$(printf "$TEMPLATE" "$DATESTAMP")
        echo "The payload is: $PAYLOAD"
        if [[ $CLOUD == "IKS" ]]; then
           echo "Calling seasonal forest in IKS";
           RESPONSE=$(curl -s --header "Content-type: application/json" http://seasonal-forest-analyzer.mycluster-dal10-u3-598878-b9d24b92a5dc610f4beac458524dd8a3-0000.us-south.containers.appdomain.cloud/v1/analyze -d "$PAYLOAD")
        else
           echo "Calling seasonal forest in AKS";
           RESPONSE=$(curl -s --header "Content-type: application/json" http://seasonal-forest-analyzer.3bb425e0bd3a462f8123.southcentralus.aksapp.io/v1/analyze -d "$PAYLOAD")
        fi;
        echo $RESPONSE;
        FAIL=$(echo $RESPONSE | jq -r '.fail');
        DIFF=$(echo $RESPONSE | jq -r '.difference');
        kubectl delete pod k6-influxdb-automation
        if [[ $FAIL == "false" ]]; then
           echo "response time is normal";
        else
           echo "response time is NOT normal will perform AI analysis on code changes: ";
           DIFF=$(git show --oneline -U0 $GITHUB_SHA | tail -n +2);
           echo $DIFF;
           docker container run --env GIT_DIFF="$DIFF" --env OPENAI_KEY="$AI_KEY" --env DIFFERENCE="$DIFF" --name node --rm brandonbenham/git-diff-analyzer
           exit 1;
        fi;
